为什么需要模板编程
1. C++是一门强类型的语言，编译时所有类型都必须确定，但有些数据结构和算法对操作的数据类型有丰富的支持。Template允许你定义这样的函数或者类，让类的使用者决定是什么类型。
2. 避免代码膨胀，共享一份实现代码。
3. 简化逻辑，针对一个共同界面为不同的使用提供各种可替代的实现的方法，降低用户的思维负担。

关键字
	template
	typename
	class
	<>
	...
	=
	,

组合
	auto
	constexpr
	typedef
	typeid

专门化
1. 实践中大部分Vector是指针类型的Vector --> 多态必须使用指针 --> 指针容器 --> 面向对象+类型安全
2. 可以提高编译链接速度，减少的编译其他额外的类型
3. 模板的专门化必须和模板本身在一个命名空间










	
