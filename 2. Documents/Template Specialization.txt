为什么需要模板编程
1. C++是一门强类型的语言，编译时所有类型都必须确定，但有些数据结构和算法对操作的数据类型有丰富的支持。Template允许你定义这样的函数或者类，让类的使用者决定是什么类型。
2. 避免代码膨胀，共享一份实现代码。
3. 简化逻辑，针对一个共同界面为不同的使用提供各种可替代的实现的方法，降低用户的思维负担。

关键字
	template
	typename
	class
	<>
	...
	=
	,

组合
	auto
	constexpr
	typedef
	typeid

基本
	template<class T> 这只是声明了有哪些类型，实际函数定义采用的会不一样
		比普通的函数多了一个类型定义
		不要纠结于什么写法，当不同的写法组成一个小单元时，它就具有不一样的抽象意义
	typename 这是在模板定义，和模板参数列表中意义不一样
		在模板定义：告诉编译器这个未知的标识符是一个类型， 在C++20中不需要
		在参数中，和class一样，指定一个类型参数

专门化
1. 实践中大部分Vector是指针类型的Vector --> 多态必须使用指针 --> 指针容器 --> 面向对象+类型安全
2. 可以提高编译链接速度，减少的编译其他额外的类型
3. 模板的专门化必须和模板本身在一个命名空间
4. 部分专门化 --> 完全专门化; 收敛类型空间

模板派生
容器与操作分离
	派生
	T-C 不同的模板参数

多态
	虚函数 -- 运行时多态
	模板 -- 编译时多态









	
